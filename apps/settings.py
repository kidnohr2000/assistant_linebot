"""
Django settings for apps project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.dirname(PROJECT_ROOT)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
REPLY_ENDPOINT = 'https://api.line.me/v2/bot/message/reply'
SECRET_KEY = os.environ.get('SECRET_KEY', None)
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN', None)
LINE_CHANNEL_SECRET = os.environ.get('LINE_CHANNEL_SECRET', None)
ALLOW_HOST1 = os.environ.get('ALLOW_HOST1', None)
DATABASES_DEFAULT_USER = os.environ.get('DATABASES_DEFAULT_USER', None)
DATABASES_DEFAULT_PASSWORD = os.environ.get('DATABASES_DEFAULT_PASSWORD', None)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', ALLOW_HOST1]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'djangobot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'apps.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apps.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'djangobot',
        'USER': DATABASES_DEFAULT_USER,
        'PASSWORD': DATABASES_DEFAULT_PASSWORD,
        'HOST': '127.0.0.1',
        'PORT': 5432,
    }
}
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

# LANGUAGE_CODE = 'en-us'
#
# TIME_ZONE = 'UTC'
LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

LOGIN_REDIRECT_URL = 'home'

LOG_DIR = 'var/logs'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.environ.get('DJANGO_LOG_LEVEL', 'ERROR'),
        },
    },
}
# LOGGING = {
#     'version': 1,   # これを設定しないと怒られる
#     'formatters': {  # 出力フォーマットを文字列形式で指定する
#         'all': {    # 出力フォーマットに`all`という名前をつける
#             'format': '\t'.join([
#                 "[%(levelname)s]",
#                 "asctime:%(asctime)s",
#                 "module:%(module)s",
#                 "message:%(message)s",
#                 "process:%(process)d",
#                 "thread:%(thread)d",
#             ])
#         },
#     },
#     'handlers': {  # ログをどこに出すかの設定
#         'file': {  # どこに出すかの設定に名前をつける `file`という名前をつけている
#             'level': 'DEBUG',  # DEBUG以上のログを取り扱うという意味
#             'class': 'logging.FileHandler',  # ログを出力するためのクラスを指定
#             'filename': os.path.join(BASE_DIR, LOG_DIR, "error.log"),  # どこに出すか
#             'formatter': 'all',  # どの出力フォーマットで出すかを名前で指定
#         },
#         'console': {  # どこに出すかの設定をもう一つ、こちらの設定には`console`という名前
#             'level': 'DEBUG',
#             # こちらは標準出力に出してくれるクラスを指定
#             'class': 'logging.StreamHandler',
#             'formatter': 'all'
#         },
#     },
#     'loggers': {  # どんなloggerがあるかを設定する
#         'default': {  # commandという名前のloggerを定義
#             'handlers': ['file', 'console'],  # 先述のfile, consoleの設定で出力
#             'level': 'DEBUG',
#         },
#     },
# }
